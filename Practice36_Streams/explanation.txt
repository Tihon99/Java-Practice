Объяснение иерархий потоков ввода-вывода в Java

Почему нужны две иерархии (InputStream/OutputStream и Reader/Writer)?

1. Разные типы данных:
   - InputStream/OutputStream работают с байтами (двоичные данные)
   - Reader/Writer работают с символами (текстовые данные)

2. Удобство использования:
   - При работе с текстом Reader/Writer удобнее, так как они:
     * Автоматически обрабатывают кодировки
     * Работают с символами, а не байтами
     * Имеют специальные методы для работы с текстом

3. Эффективность:
   - InputStream/OutputStream эффективны для двоичных данных
   - Reader/Writer эффективны для текстовых данных, так как:
     * Правильно обрабатывают многобайтовые символы
     * Учитывают особенности локали
     * Имеют буферизацию на уровне символов

4. Совместимость:
   - Можно преобразовывать потоки друг в друга:
     * InputStreamReader - из байтового в символьный
     * OutputStreamWriter - из символьного в байтовый

5. Специализация:
   - Каждая иерархия оптимизирована под свой тип данных
   - Методы соответствуют типу обрабатываемых данных
   - API более понятен и логичен для конкретного случая
